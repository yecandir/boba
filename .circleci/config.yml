#adapted from https://raw.githubusercontent.com/ethereum-optimism/optimism/develop/.circleci/config.yml
version: 2.1

jobs:
  build_bundler: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run:
          name: package-json-all-deps
          command: yarn create-all-deps
          working_directory: ./packages/boba/bundler

      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "yarn.lock" }}-{{ checksum "./packages/boba/bundler/all.deps" }}

      - run:
          name: yarn-install-if-no-cache
          command:  test -d node_modules/truffle || yarn
          working_directory: ./packages/boba/bundler

      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "yarn.lock" }}-{{ checksum "./packages/boba/bundler/all.deps" }}
          paths:
            - ./packages/boba/bundler/node_modules
            - ./packages/boba/bundler/packages/node_modules
            # - ./packages/boba/bundler/packages/client/node_modules
            # - ./packages/boba/bundler/packages/common/node_modules
            # - ./packages/boba/bundler/packages/contracts/node_modules

      - run:
          name: yarn-preprocess
          command: yarn preprocess
          working_directory: ./packages/boba/bundler

      - persist_to_workspace:
          root: .
          paths:
            - ./packages/boba/bundler

  test_bundler:
    working_directory: ~/aa # directory where steps will run
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2
    steps: # a collection of executable commands
      - attach_workspace:
          at: .
      - run: # run tests
          name: test
          command: yarn lerna-test | tee /tmp/test-dev-results.log
          working_directory: ./packages/boba/bundler
      - store_test_results: # special step to upload test results for display in Test Summary
          path: /tmp/test-dev-results.log
  test_flow_bundler:
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2
    steps: # a collection of executable commands
      - attach_workspace:
          at: .
      - run: # run hardhat-node as standalone process fork
          name: hardhat-node-process
          command: yarn hardhat-node
          background: true
          working_directory: ./packages/boba/bundler
      - run: # run tests
          name: test
          command: yarn lerna-test-flows | tee /tmp/test-flows-results.log
          working_directory: ./packages/boba/bundler
      - store_test_results: # special step to upload test results for display in Test Summary
          path: /tmp/test-flow-results.log

  lint_bundler:
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2
    steps: # a collection of executable commands
      - attach_workspace:
          at: .
      - run: # run tests
          name: lint
          command: yarn lerna-lint
          working_directory: ./packages/boba/bundler
  depcheck_bundler:
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2
    steps: # a collection of executable commands
      - attach_workspace:
          at: .
      - run: # run tests
          name: depcheck
          command: yarn depcheck
          working_directory: ./packages/boba/bundler
  integration-tests:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    environment:
      DOCKER_BUILDKIT: 1
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Bring up the stack
          command: |
            ./scripts/build-ci.sh
            BUILD=2 DAEMON=1 ./up_local.sh
          working_directory: ops
      - run:
          name: Start background logging
          working_directory: ops
          background: true
          command: docker-compose -f docker-compose.yml logs --follow
      - run:
          name: Wait for sequencer
          command: bash scripts/wait-for-sequencer.sh
          working_directory: ops
      - run:
          name: Split tests
          command: circleci tests glob "../integration-tests/test/*.spec.ts" | circleci tests split --split-by=timings --time-default=10s | tee splits.txt
          working_directory: ops
      - run:
          name: Run integration tests
          command: docker-compose run integration_tests $(cat splits.txt)
          working_directory: ops
      - run:
          name: Rewrite test name for next run
          command: |
            mkdir -p result
            cat /home/circleci/result/output.xml | sed 's/\/opt\/optimism/../g' | tee result/result.xml
          working_directory: ops
      - store_test_results:
          path: /home/circleci/project/ops/result
      - store_artifacts:
          path: /home/circleci/project/ops/result

workflows:
  main:
    jobs:
      - integration-tests
      - build_bundler
      - test_bundler:
          requires:
            - build_bundler
      - test_flow_bundler:
          requires:
            - build_bundler
      - lint_bundler:
          requires:
            - build_bundler
      - depcheck_bundler:
          requires:
            - build_bundler

